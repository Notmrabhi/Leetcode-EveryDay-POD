class Solution {

private:
    int f(int ind1, int ind2, int n, int m, string text1, string text2, vector<vector<int>> &dp){
        
        if(ind1 == n || ind2 == m) return 0;

        if(dp[ind1][ind2] != -1) return dp[ind1][ind2];

        if(text1[ind1] == text2[ind2]){
            return dp[ind1][ind2] = 1 + f(ind1+1, ind2+1, n, m, text1, text2,dp);
        }
        else{
            return dp[ind1][ind2] = max(f(ind1 + 1, ind2, n, m, text1, text2, dp), 
            f(ind1, ind2+1, n, m, text1, text2, dp));
        }

    }

public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        
        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));



        for(int ind1 = n-1; ind1  >= 0; ind1--){
            for(int ind2 = m-1; ind2 >= 0; ind2--){
                if(text1[ind1] == text2[ind2] && ind1 < n && ind2 < m){
                    dp[ind1][ind2] = 1 + dp[ind1+1][ind2+1];
                }
                else{
                    dp[ind1][ind2] = max(dp[ind1 + 1][ind2], dp[ind1][ind2+1]);
                }
            }
        }

        return dp[0][0];

    }
};


// abcde
//   i

// ace
//  j
